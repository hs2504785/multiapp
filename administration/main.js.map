{"version":3,"sources":["./projects/tools/src/lib/hello-world.service.ts","./projects/administration/src/app/app.module.ts","./projects/vendors/src/lib/vendors.module.ts","./projects/vendors/src/lib/vendors.component.ts","./projects/vendors/src/public-api.ts","./projects/administration/src/app/app-routing.module.ts","./projects/administration/src/environments/environment.ts","./projects/administration/src/main.ts","./projects/administration/src/app/app.component.ts","./projects/administration/src/app/app.component.html","./projects/vendors/src/lib/vendors.service.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelloWorldService {\n\n  constructor() { }\n\n  get message(): string {\n    return 'Hello World!';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { VendorsModule } from 'projects/vendors/src/public-api';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    VendorsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\n\n@NgModule({\n  imports: [MatButtonModule],\n  exports: [MatButtonModule]\n})\nexport class VendorsModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-vendors',\n  template: `\n    <p>\n      vendors works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class VendorsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","/*\n * Public API Surface of vendors\n */\n\nexport * from './lib/vendors.service';\nexport * from './lib/vendors.component';\nexport * from './lib/vendors.module';\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Component } from '@angular/core';\nimport { HelloWorldService } from 'projects/tools/src/lib/hello-world.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'administration';\n\n  constructor(helloWorld: HelloWorldService) {\n    this.title = helloWorld.message;\n  }\n}\n","<div style=\"text-align: center\">\n  <h1>Welcome to {{ title }}!</h1>\n  <p class=\"small\">\n    <strong>{{ title }}</strong> from library tools\n  </p>\n  <div class=\"img\"><img src=\"assets/kraken.svg\" alt=\"Kraken\" /></div>\n\n  <hr />\n  <button mat-raised-button color=\"primary\">Click Me!</button>\n  <p class=\"small\">button material style from vendors library</p>\n</div>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VendorsService {\n\n  constructor() { }\n}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}